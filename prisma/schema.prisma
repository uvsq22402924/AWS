// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String?  
  googleId         String? 
  email            String? @unique
  emailVerified    DateTime?
  hashedPassword   String?
  createdAt        DateTime? @default(now()) // Ajouter une valeur par défaut
  updatedAt        DateTime? @updatedAt // Rendre `updatedAt` nullable
  favoriteIds      String[] @db.ObjectId
  sessions         Session[]
  accounts         Account[]
  watchlist        Watchlist[] @relation("UserWatchlist")



  resetPasswordToken  String?  
  resetPasswordExpires DateTime?
}



model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  genre        String
  duration     String

}

model Watchlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId  // ID unique basé sur ObjectId MongoDB
  userId      String   @db.ObjectId  // L'ID de l'utilisateur (MongoDB ObjectId)
  movieId     String?  // ID du film (optionnel, chaîne venant de TMDb)
  seriesId    String?  // ID de la série (optionnel, chaîne venant de TMDb)
  title       String   // Titre du film ou de la série
  imageUrl    String   // URL de l'image du film ou de la série
  releaseDate String?  // Date de sortie du film ou de la série
  rating      Float?   // Note du film ou de la série
  type        String   // Type de contenu : "film" ou "série"
  user        User     @relation("UserWatchlist", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId]) // Empêche un doublon pour les films
  @@unique([userId, seriesId]) // Empêche un doublon pour les séries
}

